# List is tuple that has at least two fields: val and next,
# val can have whatever, next has to have same two fields and so on
# for example
l <- [val = 1 next = [
	val = 2 next = [
		val = 3 next = NULL
	]
]]

# forEach takes tuple and a lambda function and applies this function to every element of the tuple, returns NULL
# forEach(list callback)
# eg
forEach([1 2 3] print);# prints 123 to console

# map takes tuple and a function, returns the tuple of the same size with elements being
# results of application of the function to the elements of original list
mulBy2 <- (a) {
	mul(a 2);
}
map([1 2 3] mulBy2);
# returns [2 4 6]

# range takes three numbers(they have to be integers): start, len, step;
# and returns inclusive range
# eg
range(1 3 2);
# returns
# [1 3 5]

# get takes tuple and integer, returns Nth element of the tuple, or if the index is out of range, it returns NULL
# eg
get([1 2 3], 2);# returns 3(lists are 0 indexed)


# insert takes tuple, index and value and returns tuple with value inserted after the index
# if index is out of range returns NULL
insert(l, 1, 7)
# returns
# [1 2 7 3]

# toList takes tuple and returns list
# e.g.
toList([1 2 3]);
# returns
# [val = 1 next = [
# 	val = 2 next = [
# 		val = 3 next = NULL
# 	]
# ]]

# fromList takes list and returns tuple
fromList(l);
# returns [1 2 3]

# head takes a tuple and returns its head. The head of a tuple is basically its first element.
head([5 4 3 2 1]);
# returns 5

# tail takes a tuple and returns its tail. In other words, it chops off a tuple's head.
tail([5 4 3 2 1]);
# returns [4 3 2 1]

# last takes a tuple and returns its last element.
last([5 4 3 2 1]);  
# returns 1   

# init takes a tuple and returns everything except its last element.
init([5 4 3 2 1]); # [5 4 3 2]

# length takes a tuple and returns its length, obviously.
length([5 4 3 2 1]);# returns 5  

# empty checks if a tuple is empty. If it is, it returns True, otherwise it returns False.
null([1 2 3]); returns false  
null([]); returns true  

# reverse reverses a tuple.
reverse([5 4 3 2 1]);# returns [1 2 3 4 5]  

take takes number and a tuple. It extracts that many elements from the beginning of the tuple. Watch.
take(3 [5 4 3 2 1]);# [5 4 3]  
take(1 [3 9 3]);# [3]  
take(5 [1 2]);# [1 2]  
take(0 [6 6 6]);# []

# drop works in a similar way, only it drops the number of elements from the beginning of a tuple.
drop(3 [8 4 2 1 5 6]);# [1 5 6]  
drop(0 [1 2 3 4]);# [1 2 3 4]  
drop(100 [1 2 3 4]);# []   

# maximum takes a tuple of stuff that can be put in some kind of order and returns the biggest element.
# minimum returns the smallest.
minimum([8 4 2 1 5 6]);# 1  
maximum([1 9 2 3 4]);# 9   

# sum takes a tuple of numbers and returns their sum.
# product takes a tuple of numbers and returns their product.
sum([5 2 1 6 3 2 5 7]);# 31  
product([6 2 1 2]);# 24  
product([1 2 5 6 7 9 2 0]);# 0   

#elem takes a thing and a tuple of things and tells us if that thing is an element of the tuple.
elem(4  [3 4 5 6]);# True  
elem(10 [3 4 5 6]);# False  

add(1 2);# 3
mul(2 3);# 6
sub(1 3);# -2
div(5 2);# 2.5
pow(3 2);# 9

and(1 1);# 1
or(1 0);# 1
not(1);# 0

print('test');# prints to console
read();# reads from console

sys('echo "helloworld"');# sys calls command line, in this example it will call echo, and that will print helloworld to console