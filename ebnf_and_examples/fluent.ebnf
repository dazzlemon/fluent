digit ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'

alphaL ::= 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g'
         | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n'
         | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u'
         | 'v' | 'w' | 'x' | 'y' | 'z'

alphaU ::= 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G'
         | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N'
         | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U'
         | 'V' | 'W' | 'X' | 'Y' | 'Z'

alpha ::= alphaU | alphaL

uint ::= digit{digit}
number ::= ['-'] uint | ([uint]'.'uint)

string ::= '\''{AnyCharacter}'\''
id ::= alpha{alpha | digit | '_'}

# eg. id <- 1
assignment ::= id "<-" expr

# last command in lambda is return
# (x y z) {
#		doubleX <- mul(x 2)
# 	mul(add(doubleX y) z)
# }
# #function above will return (2*x + y)*z 
lambdaDef ::= '(' {id} ')' 
	'{' { command ';'} '}'
# also can be used as array or whatever
# [1 2 3]
# [_ false]
# [1 true]
tuple ::= '[' {expr} ']'

namedTupleField ::= id '=' expr
# [id = 1 value = valueById(1)]
namedTuple ::= '[' {namedTupleField} ']'
namedTupleAcess ::= id ':' id

# match [v1 [v2 v3]] {
# 	[1 [2 3]] -> true;
# 	[2 [1 _]] -> false;
# 	[3 _] -> "3";
# 	_ -> NULL;
# }
patternMatching ::= 'match' expr '{'
	{expr '->' expr ';'}
	'_' '->' expr ';' '}'

# fun(arg1 a2)
functionCall ::= id '(' {expr} ')'

expr ::= number | string | id | functionCall | '_' | "NULL" | namedTupleAcess | lambdaDef
command ::= assignment | functionCall | patternMatching
program ::= { command ';'}
